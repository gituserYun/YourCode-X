import requests
import sys, os
import json
import time
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# [X] 임의로 작성된 SQL 쿼리 입력에 대한 검증이 미흡하여 사용자의 정보(쿠키, 세션 등)를 탈취하거나 자동으로 비정상적인 기능이 실행, 조작의 가능한 경우
# [∆] 임의로 작성된 SQL 쿼리 입력에 대한 검증이 미흡한 경우
# [O] 임의로 작성된 SQL 쿼리 입력에 대한 검증이 안전하게 이루어진 경우

def exploitsFile(x_file):
    with open(x_file,'r') as file:
        explits = file.read().splitlines()
    return explits

# Classic SQL Injection
def classicSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"]
    textarea_fields = form_data["textarea_fields"]

    print(f"\nAttack URL(classicSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "./Inter_YourCode-X/VulnerabilityList/SQLI/classic_sqli_post.txt"
        exploits = exploitsFile(x_file)
        
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            response = requests.post(action_url, data)

            keywords = ['SQL', 'syntax']
            for keyword in keywords:
                if keyword in response.text:
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: 주의", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Classic SQL Injection", file=sys.stdout)
                    break
            logic_keywords = ['', '', '', '', '', '']

    else:
        print("Error occurred while attempting(POST/GET)")

# Error-Based SQL Injection
def errorBasedSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"]
    textarea_fields = form_data["textarea_fields"]

    print(f"\nAttack URL(errorBasedSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "./Inter_YourCode-X/VulnerabilityList/SQLI/error_based_sqli_post.txt"
        exploits = exploitsFile(x_file)
        
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            response = requests.post(action_url, data)

            keywords = [
                'You have an error in your SQL syntax;',
                'FUNCTION',
                'Key column'
            ]
            for keyword in keywords:
                if keyword in response.text:
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: 주의", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Error-Based SQL Injection", file=sys.stdout)
                    break
            logic_keywords = ['', '', '', '', '', '']

    else:
        print("Error occurred while attempting(POST/GET)")

# Union-Based SQL Injection
def unionBasedSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"]
    textarea_fields = form_data["textarea_fields"]

    print(f"\nAttack URL(unionBasedSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "./Inter_YourCode-X/VulnerabilityList/SQLI/union_sqli_post.txt"
        exploits = exploitsFile(x_file)
        
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            response = requests.post(action_url, data)

            keywords = ['패스워드', 'password', 'pass', 'pw']
            for keyword in keywords:
                if 'alert' in response.text and keyword in response.text:
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: 위험", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Union-Based SQL Injection", file=sys.stdout)
                    break

            logic_keywords = ['', '', '', '', '', '']

    else:
        print("Error occurred while attempting(POST/GET)")    

# Blind SQL Injection
def blindSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"]
    textarea_fields = form_data["textarea_fields"]

    print(f"\nAttack URL(blindSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "./Inter_YourCode-X/VulnerabilityList/SQLI/blind_sqli_post.txt"
        exploits = exploitsFile(x_file)

        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            start_time = time.time()
            response = requests.post(action_url, data)
            elapsed_time = time.time() - start_time 

            keywords = ['패스워드', 'password', 'pass', 'pw']
            if elapsed_time > 1:
                for keyword in keywords:
                    if 'alert' in response.text and keyword in response.text:
                        print(f"Attack Detected: {exploit}", file=sys.stdout)
                        print(f"Risk: 주의", file=sys.stdout)
                        print(f"Target url: {action_url}", file=sys.stdout)
                        print(f"Detail payload: Blind SQL Injection", file=sys.stdout)
                        break
                continue                    
            else:
                print("Elapsed time..")
                continue

    else:
        print("Error occurred while attempting(POST/GET)")

def outOfBandSQLI(action_url,form_data):
    return
def secondOrderSQLI(action_url,form_data):
    return


# main에서 매개변수로 전달된 url, check_url 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Error code: url[1], check_url[2] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])

    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]

    inspection_url = []
    for file in check_files:
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        form = soup.find('form')
        if form is None:
            print(f"No forms found in {file}\n")
            continue
        form_data = {
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }

        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)

        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)

        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)

        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        

        action_url = urljoin(url, form_data["action"])
        inspection_url.append(action_url)

        # Classic SQLI 함수 호출
        classicSQLI(action_url, form_data)

        # Error-Based SQLI 함수 호출
        errorBasedSQLI(action_url, form_data)

        # Union-Based SQLI 함수 호출
        unionBasedSQLI(action_url, form_data)

        # Blind SQLI 함수 호출
        blindSQLI(action_url,form_data)        

        # Out-of-band SQLI 함수 호출
        outOfBandSQLI(action_url,form_data)

        # Second Order SQLI 함수 호출
        secondOrderSQLI(action_url,form_data)

    for target in inspection_url:
        print(f"Inspection_url: {target}", file=sys.stdout)    