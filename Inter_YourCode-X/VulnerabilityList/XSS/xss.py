import requests
import sys, os
import json
import time
import re
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

# [X] 사용자 입력 값에 대한 검증 및 필터링이 미흡하여 데이터 유출 및 변조 외에도 서버 파일을 쓰거나 읽을 수 있으며 직접 임의의 명령 실행이 가능한 경우
# [∆] 사용자 입력 값에 대한 검증 및 필터링이 미흡한 경우
# [O] 사용자 입력 값에 대한 검증 및 필터링이 안전하게 이루어진 경우

def exploitsFile(x_file):
    with open(x_file,'r') as file:
        explits = file.read().splitlines()
    return explits

# Stored XSS & Reflected XSS 점검 URL식별
def inspec_url(url, check_files):
    inspection_url_1 = []
    form_value = []
    for file in check_files:
        # 페이지 내용 가져오기
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        # form 태그 찾기 + input, textarea, select, button
        form = soup.find('form')
        if form is None:
            continue
        # print(f"Checking {file}")
        
        # 해당 데이터를 분석 후 저장할 딕셔너리
        form_data = {
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }
        
        # input 태그 속성 데이터 식별
        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)

        # textarea 태그 속성 데이터 식별
        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)
        
        # select 태그 속성 데이터 식별
        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)    

        # button 태그 속성 데이터 식별
        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        

        action_url = urljoin(url, form_data["action"])

        form_value.append(form_data)
        inspection_url_1.append(action_url)

    return form_value, inspection_url_1

# Reflected XSS 파라미터 관련 전 데이터 추출
def befor_param(parameter_values):
    result_urls = [url.split('?')[0] for url in parameter_values if '?' in url]
    method = []
    for file in result_urls:
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        form = soup.find('form')
        if form is not None:
            method.append("X")
        else:
            method.append("O")
    
    return method, result_urls 

# Stored XSS
def storedXSS(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"]
    textarea_fields = form_data["textarea_fields"]

    print(f"\nAttack URL(storedXSS): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "./Inter_YourCode-X/VulnerabilityList/XSS/stored_xss_post.txt"
        exploits = exploitsFile(x_file)
        
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            
            response = requests.post(action_url, data)

            keywords = ['완료', 'completion', 'Completion', 'COMPLEATION']
            for keyword in keywords:
                if 'alert' in response.text and keyword in response.text:
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: 주의", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Stored XSS", file=sys.stdout)                    
                # else:
                    # print("Not detectable")
            logic_keywords = ['', '', '', '', '', '']
    else:
        print("Error occurred while attempting(POST/GET)")

# Reflected XSS
def reflectedXSS(action, method, param):
    print(f"\nAttack URL(reflectedXSS): {action}")
    if method == "O":
        print("Method: GET")
        x_file = "./Inter_YourCode-X/VulnerabilityList/XSS/reflected_xss_get.txt"
        exploits = exploitsFile(x_file)

        query_params = urlparse(param).query.split('&')
        parameter = {}
        for param_pair in query_params:
            key, _ = param_pair.split('=')
            for exploit in exploits:
                parameter[key] = exploit
        
                response = requests.get(action, params=parameter)
                if response.status_code != 500:
                    response_text = response.text
                    for key, exploit in parameter.items():
                        if exploit in response_text:
                            print(f"Attack Detected: {exploit}", file=sys.stdout)
                            print(f"Risk: 주의", file=sys.stdout)
                            print(f"Target url: {param}", file=sys.stdout)
                            print(f"Detail payload: Reflected XSS", file=sys.stdout)
                
                    logic_keywords = ['', '', '', '', '', '']
    elif method == "X":
        print("Method: POST")  
    else:
        print("Error occurred while attempting(POST/GET)")

# DOM-Based XSS
def domBasedXSS(action, method, param):
    return

# main에서 매개변수로 전달된 url, check_url, identi_paths 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Error code: url[1], check_url[2], identi_path[3] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])
    identi_json = json.loads(sys.argv[3])

    check_identis = [identi for identi in identi_json if '?' in identi and '=' in identi]
    parameter_values_s = set(identi.split('=')[0] + '=' for identi in check_identis)
    for identi in check_identis:
        if '&' in identi:
            parameter_values_s.add(identi)
    parameter_values = list(parameter_values_s)

    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files_1 = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]    

    # 점검 URL식별 & Stored XSS 함수 호출
    form_data_1, action_url_1 = inspec_url(url, check_files_1)
    # 점검 URL식별 & Reflected XSS 함수 호출
    methods, action_url_2 = befor_param(parameter_values)

    inspection_url = []
    # Stored XSS 함수 호출
    for i, form_data in enumerate(form_data_1):
        storedXSS(action_url_1[i], form_data)
        inspection_url.append(action_url_1[i])

    # Reflected XSS 함수 호출
    for action, method, param in zip(action_url_2, methods, parameter_values):
        reflectedXSS(action, method, param)
        inspection_url.append(action)

    # DOM-Based XSS 함수 호출
    domBasedXSS(action, method, param)

    for target in inspection_url:
        print(f"Inspection_url: {target}", file=sys.stdout)