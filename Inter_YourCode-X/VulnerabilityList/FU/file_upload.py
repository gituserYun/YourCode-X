import requests
import sys, os
import json
import time
import re
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

# [X] 업로드 파일에 대한 확장자 검증이 미흡하여 공격자에게 서버 노출 및 제어권 제공이 된 경우
# [∆] 업로드 파일에 대한 확장자 검증이 미흡한 경우
# [O] 업로드 파일에 대한 확장자 검증이 안전하게 이루어진 경우

def exploitsFile(x_file):
    with open(x_file,'r') as file:
        explits = file.read().splitlines()
    return explits

def p_inspec_url(url, check_files):
    inspection_url_1 = []
    form_value = []
    for file in check_files:
        # 페이지 내용 가져오기
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        # form 태그 찾기 + input, textarea, select, button
        form = soup.find('form')
        if form is None:
            continue
        # print(f"Checking {file}")
        
        # 해당 데이터를 분석 후 저장할 딕셔너리
        form_data = {
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }
        
        # input 태그 속성 데이터 식별
        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)

        # textarea 태그 속성 데이터 식별
        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)
        
        # select 태그 속성 데이터 식별
        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)    

        # button 태그 속성 데이터 식별
        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        

        action_url = urljoin(url, form_data["action"])

        form_value.append(form_data)
        inspection_url_1.append(action_url)

    return form_value, inspection_url_1

def g_inspec_url(parameter_values):
    result_urls = [url.split('?')[0] for url in parameter_values if '?' in url]
    method = []
    for file in result_urls:
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        form = soup.find('form')
        if form is not None:
            method.append("POST")
        else:
            method.append("GET")
    
    return method, result_urls

def extensionBypassFU_POST(action, method, param, input_fields, e_path_json, default_url):
    print(f"\nAttack URL(pathManipulationFD_POST): {action}")
    url = action
    data = {field['name']: 'X' for field in input_fields if field['name'] is not None}
    
    x_file = "./Inter_YourCode-X/VulnerabilityList/FU/file_extension_bypass.txt"
    exploits = exploitsFile(x_file)        
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    with open('./Inter_YourCode-X/VulnerabilityList/FU/YourCode-X.jsp', 'rb') as f:
        for exploit in exploits:
            data_exploit = {key: exploit if value == 'X' else value for key, value in data.items()}
            # 수정 필요
            files = {
                'fileUpload1': ('./Inter_YourCode-X/VulnerabilityList/FU/YourCode-X.jsp', f, 'application/octet-stream'),
                'fileUpload2': ('./Inter_YourCode-X/VulnerabilityList/FU/YourCode-X.jsp', f, 'application/octet-stream'),
            }
            response = requests.post(url, headers=headers, data=data_exploit, files=files)
        
        if '로그인을 해주세요' in response.text:
            inspection_url_s = set()
            for inspection in e_path_json:
                path = default_url + inspection + '/'
                print(f"Inspection_url: {path}", file=sys.stdout)
                inspection_url_s.add(path)
            inspection_url = list(inspection_url_s)

            for i_url in inspection_url:
                for exploit in exploits:
                    response = requests.get(i_url + exploit, headers=headers)
                    if 'YourCode-X Vulnerability(File Upload)' in response.text:
                        print(f"Attack Detected: {exploit}", file=sys.stdout)
                        print(f"Risk: 위험", file=sys.stdout)
                        print(f"Target url: {action}", file=sys.stdout)
                        print(f"Detail payload: Extension By Pass File Upload", file=sys.stdout)       


# main에서 매개변수로 전달된 url, check_url, identi_paths, estimated file upload path(e_path) 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Error code: url[1], check_url[2], identi_json[3], e_path_json[4] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])
    identi_json = json.loads(sys.argv[3])
    e_path_json  = json.loads(sys.argv[4])

    check_identis = [identi for identi in identi_json if '?' in identi and '=' in identi]
    parameter_values_s = set(identi.split('=')[0] + '=' for identi in check_identis)
    for identi in check_identis:
        if '&' in identi:
            parameter_values_s.add(identi)
    parameter_values = list(parameter_values_s)

    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files_1 = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]

    form_data_1, action_url_1 = p_inspec_url(url, check_files_1)
    methods, action_url_2 = g_inspec_url(parameter_values)

    # 점검 url
    inspection_url = action_url_1 + action_url_2
    for target in inspection_url:
        print(f"Inspection_url: {target}", file=sys.stdout)

    # Extension By Pass File Upload(POST)
    for action, form_data, param in zip(action_url_1, form_data_1, parameter_values):
        method = form_data["method"]
        input_fields = form_data["input_fields"]
        extensionBypassFU_POST(action, method, param, input_fields, e_path_json, url)

    # Extension By Pass File Upload(GET)

    # Capacity File Upload(POST)  capacityFU
    # Capacity File Upload(GET)  capacityFU