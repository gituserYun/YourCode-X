import requests
import sys, os
import json
import time
import re
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

# [X] 사용자 입력 값에 대한 검증 및 필터링이 미흡하여 시스템의 중요한 파일에 접근이 가능하며, 서버의 파일을 읽거나 쓰는 등의 공격이 가능한 경우
# [∆] 사용자 입력 값에 대한 검증 및 필터링이 미흡하여 특정 파일에 접근이 가능한 경우
# [O] 사용자 입력 값에 대한 검증 및 필터링이 안전하게 이루어진 경우

def exploitsFile(x_file):
    with open(x_file,'r') as file:
        explits = file.read().splitlines()
    return explits   

def inspec_url(url, check_files):
    inspection_url_1 = []
    form_value = []
    for file in check_files:
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        form = soup.find('form')
        if form is None:
            continue

        form_data = {
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }

        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)

        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)

        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)    

        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        

        action_url = urljoin(url, form_data["action"])

        form_value.append(form_data)
        inspection_url_1.append(action_url)

    return form_value, inspection_url_1

def befor_param(parameter_values):
    result_urls = [url.split('?')[0] for url in parameter_values if '?' in url]
    method = []
    for file in result_urls:
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        form = soup.find('form')
        if form is not None:
            method.append("POST")
        else:
            method.append("GET")
    
    return method, result_urls



def basicDT_all(urls):
    print(f"\nAttack URL(basicDT_all): {urls}")
    url = urls + "/"

    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/basic_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if response.status_code != 200:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {urls}", file=sys.stdout)
            print(f"Detail payload: Basic Directory Traversal", file=sys.stdout)            
    
def basicDT_get(action, method, param):
    print(f"\nAttack URL(basicDT_get): {action}")
    print(f"Method: {method}")

    query_params = urlparse(param).query.split('&')
    query_params = [param.split('=')[0] + '=' for param in query_params]
    url = action + "?" + "&".join(query_params)
    
    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/basic_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if 'root:x:0:0:root:' not in response.text:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {action}", file=sys.stdout)
            print(f"Detail payload: Basic Directory Traversal", file=sys.stdout)   

def nullByteDT_all(urls):
    print(f"\nAttack URL(nullByteDT_all): {urls}")
    url = urls + "/"

    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/null_byte_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if response.status_code != 200:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: High", file=sys.stdout)
            print(f"Target url: {urls}", file=sys.stdout)
            print(f"Detail payload: Null-Byte Directory Traversal", file=sys.stdout)       

def nullByteDT_get(action, method, param):
    print(f"\nAttack URL(nullByteDT_get): {action}")
    print(f"Method: {method}")

    query_params = urlparse(param).query.split('&')
    query_params = [param.split('=')[0] + '=' for param in query_params]
    url = action + "?" + "&".join(query_params)
    
    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/null_byte_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if 'root:x:0:0:root:' not in response.text:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {action}", file=sys.stdout)
            print(f"Detail payload: Null-Byte Directory Traversal", file=sys.stdout)

def encodingDT_all(urls):
    print(f"\nAttack URL(encodingDT_all): {urls}")
    url = urls + "/"

    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/encoding_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if response.status_code != 200:
            # print(f"Status Code: {response.status_code}")
            # print(f"payload: {url}{exploit}")
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {urls}", file=sys.stdout)
            print(f"Detail payload: Encoding Directory Traversal", file=sys.stdout)

def encodingDT_get(action, method, param):
    print(f"\nAttack URL(encodingDT_get): {action}")
    print(f"Method: {method}")
    query_params = urlparse(param).query.split('&')
    query_params = [param.split('=')[0] + '=' for param in query_params]
    url = action + "?" + "&".join(query_params)
    
    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/encoding_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if 'root:x:0:0:root:' not in response.text:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {action}", file=sys.stdout)
            print(f"Detail payload: Encoding Directory Traversal", file=sys.stdout)

def doubleEncodingDT_all(urls):
    print(f"\nAttack URL(doubleEncodingDT_all): {urls}")
    url = urls + "/"

    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/encoding(d)_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if response.status_code != 200:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {urls}", file=sys.stdout)
            print(f"Detail payload: Double-Encoding Directory Traversal", file=sys.stdout)

def doubleEncodingDT_get(action, method, param):
    print(f"\nAttack URL(doubleEncodingDT_get): {action}")
    print(f"Method: {method}")
    query_params = urlparse(param).query.split('&')
    query_params = [param.split('=')[0] + '=' for param in query_params]
    url = action + "?" + "&".join(query_params)
    
    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/encoding(d)_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if 'root:x:0:0:root:' not in response.text:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {action}", file=sys.stdout)
            print(f"Detail payload: Double-Encoding Directory Traversal", file=sys.stdout)

def unionEncodingDT_all(urls):
    print(f"\nAttack URL(unionEncodingDT_all): {urls}")
    url = urls + "/"

    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/encoding(u)_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if response.status_code != 200:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {urls}", file=sys.stdout)
            print(f"Detail payload: Union-Encoding Directory Traversal", file=sys.stdout)

def unionEncodingDT_get(action, method, param):
    print(f"\nAttack URL(unionEncodingDT_get): {action}")
    print(f"Method: {method}")
    query_params = urlparse(param).query.split('&')
    query_params = [param.split('=')[0] + '=' for param in query_params]
    url = action + "?" + "&".join(query_params)
    
    x_file = "./Inter_YourCode-X/VulnerabilityList/DT/encoding(u)_dt.txt"
    exploits = exploitsFile(x_file)
    for exploit in exploits:
        response = requests.get(url, params=exploit)

        if 'root:x:0:0:root:' not in response.text:
            continue
        else:
            print(f"Attack Detected: {exploit}", file=sys.stdout)
            print(f"Risk: 위험", file=sys.stdout)
            print(f"Target url: {action}", file=sys.stdout)
            print(f"Detail payload: Union-Encoding Directory Traversal", file=sys.stdout)

# main에서 매개변수로 전달된 url, check_url 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Error code: url[1], check_url[2], identi_json[3] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])
    identi_json = json.loads(sys.argv[3])

    # URL의 Parameter 값 작성 경로 유추('?', '=')
    check_identis = [identi for identi in identi_json if '?' in identi and '=' in identi]
    # 파라미터 값 이전 결과들 추출
    parameter_values_s = set(identi.split('=')[0] + '=' for identi in check_identis)
    for identi in check_identis:
        if '&' in identi:
            parameter_values_s.add(identi)
    parameter_values = list(parameter_values_s)

    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files_1 = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]

    # POST 방식 추출을 위한 호출
    form_data_1, action_url_1 = inspec_url(url, check_files_1)

    # GET 방식 추출을 위한 호출
    methods, action_url_2 = befor_param(parameter_values)

    # 점검 url
    inspection_url = []
    # Basic Directory Traversal
    for urls in urls_json:
        # 모든 url 경로에 절대 경로로 동작시키기
        basicDT_all(urls)
        inspection_url.append(urls)
    for action, method, param in zip(action_url_2, methods, parameter_values):
        # url 경로에 GET 파라미터 사용하여 동작시키기
        basicDT_get(action, method, param)
        inspection_url.append(action)
    
    # NULL-Byte Directory Traversal
    for urls in urls_json:
        nullByteDT_all(urls)
    for action, method, param in zip(action_url_2, methods, parameter_values):
        nullByteDT_get(action, method, param)

    # Encoding DirectoryTraversal
    for urls in urls_json:
        encodingDT_all(urls)
    for action, method, param in zip(action_url_2, methods, parameter_values):
        encodingDT_get(action, method, param)

    # Double-Encoding Directory Traversal
    for urls in urls_json:
        doubleEncodingDT_all(urls)  
    for action, method, param in zip(action_url_2, methods, parameter_values):
        doubleEncodingDT_get(action, method, param)
    
    # Union-Encoding Directory Traversal
    for urls in urls_json:
        unionEncodingDT_all(urls) 
    for action, method, param in zip(action_url_2, methods, parameter_values):
        unionEncodingDT_get(action, method, param)

    for target in inspection_url:
        print(f"Inspection_url: {target}", file=sys.stdout)